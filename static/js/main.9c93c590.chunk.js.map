{"version":3,"sources":["utils/fetchClient.ts","components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","api/dataFromService.ts","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","arguments","length","undefined","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","emptyPost","id","title","userId","PostsList","_ref","posts","onChange","_useState","useState","_useState2","_slicedToArray","postSelected","setPostSelected","_jsxs","children","_jsx","className","map","post","isPostSelected","type","classNames","onClick","handlePostSelected","Loader","emptyComment","name","email","text","NewCommentForm","addNewComment","isNamePresent","setIsNamePresent","_useState3","_useState4","isEmailPresent","setIsEmailPresent","_useState5","_useState6","isTextPresent","setIsTextPresent","_useState7","_useState8","isLoading","setIsLoading","_useState9","_useState10","comment","setComment","handleChange","event","target","value","prevState","_objectSpread","_defineProperty","onSubmit","preventDefault","finally","prevValue","htmlFor","placeholder","PostDetails","comments","setComments","isDataLoading","setIsDataLoading","isErrorOccured","setIsErrorOccured","isFormOpened","setIsFormOpened","isNoComment","writeCommentButton","useEffect","postId","concat","commentsFromServer","catch","handleDeleteButton","currentId","prevComments","filter","_Fragment","commentId","commentBody","href","newComment","postService","addedComment","_toConsumableArray","UserSelector","users","isMenuOpened","setIsMenuOpened","currUser","setCurrUser","selectRef","useRef","handleDropdownMenu","state","handleClickOutside","current","document","addEventListener","removeEventListener","role","user","handleChooseUser","App","setUsers","selectedUser","setSelectedUser","noPostsYet","userFromServer","setPosts","_useState11","_useState12","selectedPost","setSelectedPost","postsFromServer","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.9c93c590.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  onChange: (post: Post) => void,\n};\n\nconst emptyPost = {\n  id: 0,\n  title: '',\n  userId: 0,\n  body: '',\n};\n\nexport const PostsList: React.FC<Props> = ({ posts, onChange }) => {\n  const [postSelected, setPostSelected] = useState<number>(0);\n\n  const handlePostSelected = (post: Post) => {\n    setPostSelected(post.id);\n    onChange(post);\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => {\n            const { id, title } = post;\n            const isPostSelected = postSelected === id;\n\n            return (\n              <tr data-cy=\"Post\" key={id}>\n                <td data-cy=\"PostId\">{id}</td>\n\n                <td data-cy=\"PostTitle\">\n                  {title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={classNames('button is-link', {\n                      'is-light': !isPostSelected,\n                    })}\n                    onClick={() => handlePostSelected(\n                      isPostSelected ? emptyPost : post,\n                    )}\n                  >\n                    {isPostSelected ? 'Close' : 'Open'}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { CommentData } from '../types/Comment';\n\ntype Props = {\n  addNewComment: (newComment: CommentData) => Promise<void>\n};\nconst emptyComment = {\n  name: '',\n  email: '',\n  text: '',\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ addNewComment }) => {\n  const [isNamePresent, setIsNamePresent] = useState<boolean>(true);\n  const [isEmailPresent, setIsEmailPresent] = useState<boolean>(true);\n  const [isTextPresent, setIsTextPresent] = useState<boolean>(true);\n\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [comment, setComment] = useState(emptyComment);\n  const { name, email, text } = comment;\n\n  const handleReset = () => {\n    setComment(emptyComment);\n\n    setIsNamePresent(true);\n    setIsEmailPresent(true);\n    setIsTextPresent(true);\n  };\n\n  const handleChange = (\n    event: React.ChangeEvent <HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    const title = event.target.name;\n    const { value } = event.target;\n\n    setComment(prevState => ({ ...prevState, [title]: value }));\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setIsNamePresent(!!name);\n    setIsEmailPresent(!!email);\n    setIsTextPresent(!!text);\n\n    if (name && email && text) {\n      setIsLoading(true);\n      addNewComment({ name, email, body: text })\n        .then(() => setIsLoading(false))\n        .finally(() => setComment(prevValue => ({ ...prevValue, text: '' })));\n    }\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': !isNamePresent,\n            })}\n            value={name}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {!isNamePresent && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {!isNamePresent && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': !isEmailPresent,\n            })}\n            value={email}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {!isEmailPresent && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {!isEmailPresent && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"text\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': !isTextPresent,\n            })}\n            value={text}\n            onChange={handleChange}\n          />\n        </div>\n\n        {!isTextPresent && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleReset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment, CommentData } from '../types/Comment';\nimport * as postService from '../api/dataFromService';\n\ntype Props = {\n  post: Post,\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const { id, title, body } = post;\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isDataLoading, setIsDataLoading] = useState<boolean>(false);\n  const [isErrorOccured, setIsErrorOccured] = useState<boolean>(false);\n  const [isFormOpened, setIsFormOpened] = useState<boolean>(false);\n  const isNoComment = !isDataLoading && !isErrorOccured && !comments.length;\n  const writeCommentButton = !isDataLoading && !isErrorOccured && !isFormOpened;\n\n  useEffect(() => {\n    setComments([]);\n    setIsDataLoading(true);\n    setIsErrorOccured(false);\n    setIsFormOpened(false);\n\n    postService.getComments(id)\n      .then((commentsFromServer) => setComments(commentsFromServer))\n      .catch(() => setIsErrorOccured(true))\n      .finally(() => setIsDataLoading(false));\n  }, [post]);\n\n  const handleAddNewComment = (newComment: CommentData) => {\n    const comment = { ...newComment, postId: id };\n\n    return postService.postComment(comment)\n      .then((addedComment) => {\n        setComments(prevComments => [...prevComments, addedComment]);\n      });\n  };\n\n  const handleDeleteButton = (currentId: number) => {\n    setComments(prevComments => prevComments.filter(\n      comment => comment.id !== currentId,\n    ));\n    postService.deleteComment(currentId);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${id}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isDataLoading && <Loader />}\n\n          {isErrorOccured && (\n            <div\n              className=\"notification is-danger\"\n              data-cy=\"CommentsError\"\n            >\n              Something went wrong\n            </div>\n          )}\n\n          {isNoComment && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {comments.length > 0 && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments.map((comment: Comment) => {\n                const {\n                  id: commentId,\n                  body: commentBody,\n                  name,\n                  email,\n                } = comment;\n\n                return (\n                  <article\n                    className=\"message is-small\"\n                    data-cy=\"Comment\"\n                    key={commentId}\n                  >\n                    <div className=\"message-header\">\n                      <a\n                        href={`mailto:${email}`}\n                        data-cy=\"CommentAuthor\"\n                      >\n                        {name}\n                      </a>\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        onClick={() => handleDeleteButton(commentId)}\n                      >\n                        delete button\n                      </button>\n                    </div>\n\n                    <div className=\"message-body\" data-cy=\"CommentBody\">\n                      {commentBody}\n                    </div>\n                  </article>\n                );\n              })}\n            </>\n          )}\n\n          { writeCommentButton && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsFormOpened(true)}\n            >\n              Write a comment\n            </button>\n          )}\n\n        </div>\n\n        {isFormOpened && (\n          <NewCommentForm\n            addNewComment={handleAddNewComment}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import { User } from '../types/User';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const postComment = (comment: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', comment);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import classNames from 'classnames';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[],\n  onChange: (user: User) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({ users, onChange }) => {\n  const [isMenuOpened, setIsMenuOpened] = useState<boolean>(false);\n  const [currUser, setCurrUser] = useState<string>('Choose a user');\n  const selectRef = useRef(null);\n\n  const handleDropdownMenu = () => {\n    setIsMenuOpened(state => !state);\n  };\n\n  const handleChooseUser = (user: User) => {\n    handleDropdownMenu();\n    setCurrUser(user.name);\n    onChange(user);\n  };\n\n  const handleClickOutside = (event: MouseEvent) => {\n    if (event.target !== selectRef.current && isMenuOpened) {\n      setIsMenuOpened(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [isMenuOpened]);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': isMenuOpened,\n      })}\n      role=\"presentation\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleDropdownMenu}\n        >\n          <span>{currUser}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => {\n            const { id, name } = user;\n\n            return (\n              <a\n                key={id}\n                href={`#user-${id}`}\n                className={classNames('dropdown-item', {\n                  'is-active': name === currUser,\n                })}\n                onClick={() => handleChooseUser(user)}\n              >\n                {name}\n              </a>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\nimport * as postService from './api/dataFromService';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isDataLoading, setIsDataLoading] = useState<boolean>(false);\n  const [isErrorOccured, setIsErrorOccured] = useState<boolean>(false);\n  const noPostsYet = selectedUser && !isDataLoading && !isErrorOccured;\n\n  useEffect(() => {\n    postService.getUsers()\n      .then((userFromServer: User[]) => setUsers(userFromServer))\n      .catch(() => setIsErrorOccured(true));\n  }, []);\n\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  useEffect(() => {\n    setIsDataLoading(true);\n    setIsErrorOccured(false);\n    setSelectedPost(null);\n    setPosts([]);\n\n    if (!selectedUser) {\n      return;\n    }\n\n    postService.getPosts(selectedUser.id)\n      .then((postsFromServer: Post[]) => setPosts(postsFromServer))\n      .catch(() => setIsErrorOccured(true))\n      .finally(() => setIsDataLoading(false));\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  onChange={user => setSelectedUser(user)}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {selectedUser && isDataLoading && <Loader />}\n\n                {isErrorOccured && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                { noPostsYet && posts.length === 0 && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n\n                {posts.length > 0 && (\n                  <PostsList\n                    posts={posts}\n                    onChange={post => setSelectedPost(post)}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost?.id },\n            )}\n          >\n            {selectedPost?.id && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails post={selectedPost} />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}